{"version":3,"file":"static/js/735.9bcc6610.chunk.js","mappings":"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","sources":["hooks/useInput.js","components/Get In Touch/ContactForm.js","components/UI/Button.js","webpack://personal-portfolio/./src/components/Get In Touch/contactForm.module.css?3b99","webpack://personal-portfolio/./src/components/UI/button.module.css?3058","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useInput=(validateValue)=>{\r\n    const [enteredValue,setEnteredValue]=useState('');\r\n    const [isTouched,setIsTouched]=useState(false);\r\n\r\n    const valueIsValid=validateValue(enteredValue);\r\n    const hasError=!valueIsValid&&isTouched;\r\n\r\n    const valueChangeHandler=(event)=>{\r\n        setEnteredValue(event.target.value);\r\n    }\r\n    const inputBlurHandler=(event)=>{\r\n        setIsTouched(true);\r\n    }\r\n    const reset=()=>{\r\n        setEnteredValue('');\r\n        setIsTouched(false);\r\n    }\r\n    return{\r\n        value:enteredValue,\r\n        isValid:valueIsValid,\r\n        hasError,\r\n        valueChangeHandler,\r\n        inputBlurHandler,\r\n        reset\r\n    };\r\n};\r\nexport default useInput;","import React, { Fragment, useState } from \"react\";\r\nimport { Prompt } from \"react-router-dom\";\r\n\r\nimport classes from \"./contactForm.module.css\";\r\nimport Button from \"../UI/Button\";\r\nimport useInput from \"../../hooks/useInput\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst ContactForm = ({ content }) => {\r\n\r\n    const [isEntering, setIsEntering] = useState(false);\r\n\r\n    const { value: enteredName,\r\n        hasError: nameInputHasError,\r\n        isValid: enteredNameIsValid,\r\n        valueChangeHandler: nameChangedHandler,\r\n        inputBlurHandler: nameBlurHandler,\r\n    } = useInput(value => value.trim() !== '');\r\n\r\n    const { value: enteredPhone,\r\n        hasError: phoneInputHasError,\r\n        isValid: enteredPhoneIsValid,\r\n        valueChangeHandler: phoneChangedHandler,\r\n        inputBlurHandler: phoneBlurHandler,\r\n    } = useInput(value => value.trim().length >= 10);\r\n\r\n    const { value: enteredEmail,\r\n        hasError: emailInputHasError,\r\n        isValid: enteredEmailIsValid,\r\n        valueChangeHandler: emailChangedHandler,\r\n        inputBlurHandler: emailBlurHandler,\r\n    } = useInput(value => value.includes('@'));\r\n\r\n    const { value: enteredMessage,\r\n        hasError: messageInputHasError,\r\n        isValid: enteredMessageIsValid,\r\n        valueChangeHandler: messageChangedHandler,\r\n        inputBlurHandler: messageBlurHandler,\r\n    } = useInput(value => value.trim().length >= 10);\r\n\r\n    let formIsValid = false;\r\n\r\n    if (enteredNameIsValid && enteredEmailIsValid && enteredMessageIsValid && enteredPhoneIsValid) {\r\n        formIsValid = true;\r\n    }\r\n\r\n    const [btnText, setBtnText] = useState('Send Message');\r\n    const [isSent, setIsSent] = useState(false);\r\n    const [enteredLName, setEnteredLName] = useState('');\r\n\r\n    const lastNameChangeHandler = (event) => {\r\n        setEnteredLName(event.target.value);\r\n    }\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        // resetNameHandler();\r\n        // resetEmailHandler();\r\n        // resetPhoneHandler();\r\n        // resetMessageHandler();\r\n        // setEnteredLName('');\r\n        if (!enteredNameIsValid || !enteredEmailIsValid || !enteredMessageIsValid || !enteredPhoneIsValid) {\r\n            return;\r\n        }\r\n        const message={\r\n            time:new Date().toUTCString(),\r\n            name:enteredName+\" \"+enteredLName,\r\n            email:enteredEmail,\r\n            phone:enteredPhone,\r\n            message:enteredMessage,\r\n        }\r\n        finishEnteringHandler();\r\n        sendMessageHanlder(message);\r\n    }\r\n    \r\n    const sendMessageHanlder=async(message)=>{\r\n        setBtnText((prevValue)=>'Sending ...');\r\n        await fetch('https://react-redux-47ef8-default-rtdb.firebaseio.com/portfolio-messages.json',{\r\n            method:'POST',\r\n            body:JSON.stringify(message)\r\n        });\r\n        setIsSent(true);\r\n        setBtnText((prevValue) => 'Message Sent');\r\n    }\r\n\r\n    const finishEnteringHandler=()=>{\r\n        setIsEntering(false);\r\n      }\r\n      const formFocussedHandler = () => {\r\n        setIsEntering(true);\r\n      };\r\n    const nameInputClasses = nameInputHasError ? `${classes.Inputs} ${classes.invalidInput}` : classes.Inputs;\r\n    const emailInputClasses = emailInputHasError ? `${classes.Inputs} ${classes.invalidInput}` : classes.Inputs;\r\n    const phoneInputClasses = phoneInputHasError ? `${classes.Inputs} ${classes.invalidInput}` : classes.Inputs;\r\n    const messageInputClasses = messageInputHasError ? `${classes.Inputs} ${classes.invalidInput}` : classes.Inputs;\r\n    const formClasses = isSent ? `${classes.contactForm} ${classes.sent}` : classes.contactForm;\r\n\r\n    const nonThemeColor = useSelector(state => state.nonThemeColor);\r\n    return (\r\n        <Fragment>\r\n            <Prompt when={isEntering} message={(location) =>\r\n                'Are You Sure You Want To Leave ? All your entered data will be lost!'}\r\n            />\r\n            <div className={classes.contactFormCard}>\r\n                <h1 style={{ color: nonThemeColor }}>Leave A Message</h1>\r\n                <form onFocus={formFocussedHandler} action=\"\" onSubmit={formSubmitHandler} className={formClasses}>\r\n                    <input value={enteredName}\r\n                        onBlur={nameBlurHandler}\r\n                        onChange={nameChangedHandler}\r\n                        type=\"text\"\r\n                        className={nameInputClasses}\r\n                        placeholder=\"First Name\"\r\n                        disabled={isSent}\r\n                    />\r\n                    <input type=\"text\"\r\n                        id=\"lName\"\r\n                        value={enteredLName}\r\n                        onChange={lastNameChangeHandler}\r\n                        className={classes.Inputs}\r\n                        placeholder=\"Last Name (optional)\"\r\n                        disabled={isSent}\r\n                    />\r\n\r\n                    <input value={enteredEmail}\r\n                        onBlur={emailBlurHandler}\r\n                        onChange={emailChangedHandler}\r\n                        type=\"email\"\r\n                        className={emailInputClasses}\r\n                        placeholder=\"Email\"\r\n                        disabled={isSent}\r\n                    />\r\n                    <input value={enteredPhone}\r\n                        onBlur={phoneBlurHandler}\r\n                        onChange={phoneChangedHandler}\r\n                        type=\"text\"\r\n                        className={phoneInputClasses}\r\n                        placeholder=\"Phone\"\r\n                        minLength={10}\r\n                        maxLength={12}\r\n                        disabled={isSent}\r\n                    /><br />\r\n                    <textarea\r\n                        value={enteredMessage}\r\n                        onBlur={messageBlurHandler}\r\n                        onChange={messageChangedHandler}\r\n                        className={messageInputClasses}\r\n                        name=\"message\"\r\n                        placeholder=\"Message\"\r\n                        disabled={isSent}\r\n                    ></textarea>\r\n                    <div className={classes.sendBtn}>\r\n                        <Button type=\"submit\" disabled={!formIsValid || isSent}>{btnText}</Button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\r\nimport classes from \"./button.module.css\";\r\nconst Button = (props) => {\r\n  return (\r\n    <button\r\n      type={props.type || 'button'}\r\n      className={`${classes.btn} ${props.className}`}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;","// extracted by mini-css-extract-plugin\nexport default {\"contactFormCard\":\"contactForm_contactFormCard__OWxYQ\",\"contactForm\":\"contactForm_contactForm__N2YuO\",\"Inputs\":\"contactForm_Inputs__Q7zyT\",\"sendBtn\":\"contactForm_sendBtn__eAZPB\",\"invalidInput\":\"contactForm_invalidInput__DN5ex\",\"sent\":\"contactForm_sent__HjgTl\"};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button_btn__PMIVv\"};","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["validateValue","enteredValue","setEnteredValue","useState","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","content","isEntering","setIsEntering","enteredName","nameInputHasError","enteredNameIsValid","nameChangedHandler","nameBlurHandler","useInput","trim","enteredPhone","phoneInputHasError","enteredPhoneIsValid","phoneChangedHandler","phoneBlurHandler","length","enteredEmail","emailInputHasError","enteredEmailIsValid","emailChangedHandler","emailBlurHandler","includes","enteredMessage","messageInputHasError","enteredMessageIsValid","messageChangedHandler","messageBlurHandler","formIsValid","btnText","setBtnText","isSent","setIsSent","enteredLName","setEnteredLName","sendMessageHanlder","async","prevValue","fetch","method","body","JSON","stringify","message","finishEnteringHandler","nameInputClasses","classes","Inputs","invalidInput","emailInputClasses","phoneInputClasses","messageInputClasses","formClasses","contactForm","sent","nonThemeColor","useSelector","state","Fragment","when","location","className","contactFormCard","style","color","onFocus","action","onSubmit","preventDefault","time","Date","toUTCString","name","email","phone","onBlur","onChange","type","placeholder","disabled","id","minLength","maxLength","sendBtn","Button","props","btn","onClick","children","_extends","Object","assign","bind","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf"],"sourceRoot":""}